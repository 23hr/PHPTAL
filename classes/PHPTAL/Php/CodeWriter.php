<?php
/**
 * PHPTAL templating engine
 *
 * PHP Version 5
 *
 * @category HTML
 * @package  PHPTAL
 * @author   Laurent Bedubourg <lbedubourg@motion-twin.com>
 * @author   Kornel Lesi≈Ñski <kornel@aardvarkmedia.co.uk>
 * @license  http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @version  SVN: $Id$
 * @link     http://phptal.org/
 */
/**
 * Helps generate php representation of a template.
 *
 * @package PHPTAL
 * @subpackage Php
 * @author Laurent Bedubourg <lbedubourg@motion-twin.com>
 */
class PHPTAL_Php_CodeWriter
{
    public function __construct(PHPTAL_Php_State $state)
    {
        $this->_state = $state;
        $this->rootBlock = new PHPTAL_Expr_Block(PHPTAL_Expr_Block::NO_BRACES);
        $this->pushBlock($this->rootBlock);
    }

    public function getState()
    {
        return $this->_state;
    }

    public function createTempVariable()
    {
        return $this->_state->createTempVariable();
    }

    public function recycleTempVariable(PHPTAL_Expr_TempVar $var)
    {
        $this->_state->recycleTempVariable($var);
    }

    public function getCacheFilesBaseName()
    {
        return $this->_state->getCacheFilesBaseName();
    }

    public function getRoot()
    {
        return $this->rootBlock;
    }

    public function getResult()
    {
        return '<?php '.$this->getRoot()->optimized().'?>';
    }

    /**
     * set full '<!DOCTYPE...>' string to output later
     *
     * @param string $dt
     *
     * @return void
     */
    public function setDocType($dt)
    {
        $this->_state->_doctype = $dt;
    }

    /**
     * set full '<?xml ?>' string to output later
     *
     * @param string $dt
     *
     * @return void
     */
    public function setXmlDeclaration($dt)
    {
        $this->_state->_xmldeclaration = $dt;
    }

    public function getPrefixedFunctionName($name)
    {
        return $this->_state->getFunctionPrefix() . $name;
    }

    /**
     * @see PHPTAL_Php_State::setTalesMode()
     *
     * @param string $mode
     *
     * @return string
     */
    public function setTalesMode($mode)
    {
        return $this->_state->setTalesMode($mode);
    }

    public function splitExpression($src)
    {
        preg_match_all('/(?:[^;]+|;;)+/sm', $src, $array);
        $array = $array[0];
        foreach ($array as &$a) $a = str_replace(';;', ';', $a);
        return $array;
    }

    public function evaluateExpression($src)
    {
        return $this->_state->evaluateExpression($src);
    }

    public function noThrow($bool)
    {
        if ($bool) {
            $this->pushCode(new PHPTAL_Expr_PHP('$ctx->noThrow(true)'));
        } else {
            $this->pushCode(new PHPTAL_Expr_PHP('$ctx->noThrow(false)'));
        }
    }

    /**
     * Generate code for setting DOCTYPE
     *
     * @param bool $called_from_macro for error checking: unbuffered output doesn't support that
     */
    public function doDoctype($called_from_macro = false)
    {
        if ($this->_state->_doctype) {
            $code = new PHPTAL_Expr_PHP('$ctx->setDocType(',new PHPTAL_Expr_String($this->_state->_doctype),',',
                ($called_from_macro?'true':'false'),')');
            $this->pushCode($code);
        }
    }

    /**
     * Generate XML declaration
     *
     * @param bool $called_from_macro for error checking: unbuffered output doesn't support that
     */
    public function doXmlDeclaration($called_from_macro = false)
    {
        if ($this->_state->_xmldeclaration && $this->getOutputMode() !== PHPTAL::HTML5) {
            $code = new PHPTAL_Expr_PHP('$ctx->setXmlDeclaration(',new PHPTAL_Expr_String($this->_state->_xmldeclaration),',',
                ($called_from_macro?'true':'false').')');
            $this->pushCode($code);
        }
    }

    public function functionExists($name)
    {
        assert('false !== strpos($name,$this->_state->getFunctionPrefix())');
        return $this->_state->functionExists($name);
    }

    public function doTemplateFile($functionName, PHPTAL_Dom_Element $treeGen)
    {
        $this->doComment("\n*** DO NOT EDIT THIS FILE ***\n\nGenerated by PHPTAL from ".$treeGen->getSourceFile()." (edit that file instead)");

        if (version_compare(PHP_VERSION, '5.3', '>=') && __NAMESPACE__) {
            $this->pushCode(new PHPTAL_Expr_PHP('use '.'PHPTALNAMESPACE as P'));
        }

        $this->doFunction($functionName, 'PHPTAL $tpl, PHPTAL_Context $ctx');
        $this->_state->setFunctionPrefix($functionName . "_");
        $this->doSetVar(new PHPTAL_Expr_Var('$_thistpl'), new PHPTAL_Expr_Var('$tpl'));
        $this->doInitTranslator();
        $this->pushCode($treeGen->generateCode($this->_state));
        $this->doComment("end");
        $this->doEnd('function');
    }

    public function doFunction($name, $params)
    {
        $this->_state->setFunctionExists($name);

        $fn = new PHPTAL_Expr_Func($name,$params);
        $this->rootBlock->append($fn);
        $this->pushBlock($fn->getBodyBlock(), $fn);
    }

    public function doComment($comment)
    {
        $this->pushCode(new PHPTAL_Expr_Comment($comment));
    }

    public function doInitTranslator()
    {
        if ($this->_state->isTranslationOn()) {
            $this->doSetVar('$_translator', '$tpl->getTranslator()');
        }
    }

    public function getTranslatorReference()
    {
        if (!$this->_state->isTranslationOn()) {
            throw new PHPTAL_ConfigurationException("i18n used, but Translator has not been set");
        }
        return '$_translator';
    }

    public function doForeach($out, PHPTAL_Expr $source)
    {
        $this->pushCode($foreach = new PHPTAL_Expr_Foreach($out, $source));
        $this->pushBlock($foreach->getBlock(), $foreach);
    }

    public function doEnd($expects = null)
    {
        $pop = $this->popBlock();

        if ($expects === 'function' && !$pop instanceof PHPTAL_Expr_Func) throw new PHPTAL_Exception("Popped $expects in wrong order");
        if ($expects === 'if' && !$pop instanceof PHPTAL_Expr_If) throw new PHPTAL_Exception("Popped $expects in wrong order");
        if ($expects === 'foreach' && !$pop instanceof PHPTAL_Expr_Foreach) throw new PHPTAL_Exception("Popped $expects in wrong order");
    }

    public function doTry()
    {
        $this->pushCode($try = new PHPTAL_Expr_Try());
        $this->pushBlock($try->getBlock(), $try);
    }

    public function doSetVar($varname, $code)
    {
        $this->pushCode(new PHPTAL_Expr_PHP($varname,' = ',$code));
    }

    public function doCatch($exception,$var)
    {
        $try = $this->popBlock();
        assert('$try instanceof PHPTAL_Expr_Try');
        $this->pushBlock($try->addCatchBlock($exception,$var), $try);
    }

    public function doIf(PHPTAL_Expr $condition)
    {
        $this->pushCode($if = new PHPTAL_Expr_If($condition));
        $this->pushBlock($if->getThenBlock(), $if);
    }

    public function doElseIf(PHPTAL_Expr $condition)
    {
        $if = $this->popBlock();
        assert('$if instanceof PHPTAL_Expr_If');
        $else = $if->getElseBlock();
        $else->append($newif = new PHPTAL_Expr_If($condition));
        $this->pushBlock($newif->getThenBlock(), $newif);
    }

    public function doElse()
    {
        $if = $this->popBlock();
        assert('$if instanceof PHPTAL_Expr_If');
        $this->pushBlock($if->getElseBlock(), $if);
    }

    /**
     * FIXME: this is not a right design
     */
    public function doEchoOrPushCode(PHPTAL_Expr_Stmt $code)
    {
        if ($code instanceof PHPTAL_Expr) $this->doEchoRaw($code);
        else $this->pushCode($code);
    }

    public function doEcho(PHPTAL_Expr $code)
    {
        $this->pushCode(new PHPTAL_Expr_Echo(new PHPTAL_Expr_Escape($code)));
    }

    public function doEchoRaw(PHPTAL_Expr $code)
    {
        $this->pushCode(new PHPTAL_Expr_Echo(new PHPTAL_Expr_Stringify($code)));
    }

    public function interpolateHTML($html)
    {
        return $this->_state->interpolateTalesVarsInHTML($html);
    }

    public function interpolateCDATA($str)
    {
        assert('is_string($str)');
        return $this->_state->interpolateTalesVarsInCDATA($str);
    }

    public function pushHTML($html)
    {
        assert('is_string($html)');
        assert('false === strpos($html,"<?php")');
        if ($html === "") return;
        $this->doEchoRaw(new PHPTAL_Expr_String($html));
    }

    public function pushCode(PHPTAL_Expr_Stmt $codeLine)
    {
        assert('$this->currentBlock instanceof PHPTAL_Expr_Block');
        $this->currentBlock->append($codeLine);
    }

    public function getEncoding()
    {
        return $this->_state->getEncoding();
    }

    public function interpolateTalesVarsInString($src)
    {
        assert('is_string($src)');
        return $this->_state->interpolateTalesVarsInString($src);
    }

    public function setDebug($bool)
    {
        return $this->_state->setDebug($bool);
    }

    public function isDebugOn()
    {
        return $this->_state->isDebugOn();
    }

    public function getOutputMode()
    {
        return $this->_state->getOutputMode();
    }

    public function quoteAttributeValue(PHPTAL_Expr $value)
    {
        return new PHPTAL_Expr_Quote($value, $this->getOutputMode(), $this->getEncoding());

    }

    public function pushContext()
    {
        $this->doSetVar('$ctx', new PHPTAL_Expr_PHP('$tpl->pushContext()'));
    }

    public function popContext()
    {
        $this->doSetVar('$ctx', new PHPTAL_Expr_PHP('$tpl->popContext()'));
    }

    private function pushBlock(PHPTAL_Expr_Stmt $c, $usercontext = NULL)
    {
        $this->blocks[] = array($c, $usercontext);
        $this->currentBlock = $c;
    }

    private function popBlock()
    {
        if (count($this->blocks)<=1) throw new PHPTAL_Exception("PHPTAL Bug: attempted to pop last block");

        list(,$usercontext) = array_pop($this->blocks);
        $this->currentBlock = $this->blocks[count($this->blocks)-1][0];
        return $usercontext;
    }

    private $blocks = array();
    private $currentBlock, $rootBlock;

    private $_state;
}

